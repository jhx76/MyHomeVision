package com.mhv.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.mhv.bean.Pallier;

public class PallierDAOImpl implements PallierDAO {

	private static final String SQL_SELECT_ALL = "SELECT id, pallierName, description, imagePath, position FROM T_PALLIER";
	private static final String SQL_SELECT_BY_ID = "SELECT id, pallierName, imagePath, position, description FROM T_PALLIER WHERE id=?";
	private static final String SQL_SELECT_BY_NAME = "SELECT id, pallierName, imagePath, position, description FROM T_PALLIER WHERE pallierName = ?";
	private static final String SQL_DELETE_BY_ID = "DELETE FROM T_PALLIER WHERE id = ?";
	private static final String SQL_MODIFY_BY_ID = "UPDATE T_PALLIER SET pallierName=?, imagePath=?, position=?, description=? WHERE id=?";
	private static final String SQL_SELECT_MAX_POSITION = "SELECT max(position) AS maxPosition FROM T_PALLIER";
	private static final String SQL_INSERT = "INSERT INTO T_PALLIER (pallierName, description, position) VALUES (?, ?, ?)";
	
	private DAOFactory daoFactory;
	
	public PallierDAOImpl(DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}
	
	@Override
	public void create(Pallier pallier) throws DAOException, IllegalArgumentException {
		Connection conn = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;
		try {
			/* On récupere avant tout la position du pallier a enregistrer */
			int position = selectMaxPallierPosition() + 1;
			pallier.setPosition(position);
			
			/* Création du pallier en base de données */
			conn = daoFactory.getConnection();
			preparedStatement = DAOUtils.initPreparedQuery(conn, SQL_INSERT, true, pallier.getPallierName(), pallier.getDescription(), pallier.getPosition());
			int status = preparedStatement.executeUpdate();
			if(status == 0) {
				throw new DAOException("Échec de l'enregistrement du pallier !<br/>[sql query returned with status 0]");
			}
			autoGeneratedValues = preparedStatement.getGeneratedKeys();
			if(autoGeneratedValues.next()) {
				pallier.setId(autoGeneratedValues.getLong(1));
			}
			else {
				throw new DAOException("Échec de l'enregistrement du nouveau pallier. Aucune valeur auto-générée retournée !");
			}
		}
		catch(SQLException e) {
			throw new DAOException(e);
		}
		finally {
			DAOUtils.release(autoGeneratedValues, preparedStatement, conn);
		}
	}

	@Override
	public void deleteById(Long id) throws DAOException {
		Connection conn = null;
		PreparedStatement preparedStatement = null;
		try {
			conn = daoFactory.getConnection();
			preparedStatement = DAOUtils.initPreparedQuery(conn, SQL_DELETE_BY_ID, false, id);
			int status = preparedStatement.executeUpdate();
			if(status == 0) {
				throw new DAOException("Impossible de supprimer le pallier... (corrupted ID)");
			}
		}
		catch(SQLException e) {
			throw new DAOException(e);
		}
		finally {
			DAOUtils.release(preparedStatement, conn);
		}
	}

	@Override
	public void modify(Pallier pallier) throws DAOException {
		Connection conn = null;
		PreparedStatement preparedStatement = null;
		try {
			conn = daoFactory.getConnection();
			//"UPDATE T_PALLIER SET pallierName=?, imagePath=?, position=? WHERE id=?";
			preparedStatement = DAOUtils.initPreparedQuery(conn, SQL_MODIFY_BY_ID, false, 
					pallier.getPallierName(), pallier.getImagePath(), pallier.getPosition(), pallier.getDescription(), pallier.getId());
			int status = preparedStatement.executeUpdate();
			if(status == 0) {
				throw new DAOException("Impossible de mettre a jour le pallier avec l'image.");
			}
		}
		catch(SQLException e) {
			throw new DAOException(e);
		}
		finally {
			DAOUtils.release(preparedStatement, conn);
		}
	}

	@Override
	public Pallier getPallierById(Long id) throws DAOException {
		Connection conn = null;
		PreparedStatement preparedStatement = null;
		ResultSet result = null;
		Pallier pallier = null;
		try {
			conn = daoFactory.getConnection();
			preparedStatement = DAOUtils.initPreparedQuery(conn, SQL_SELECT_BY_ID, false, id);
			result = preparedStatement.executeQuery();
			if(result.next()) {
				pallier = map(result);
			}
		}
		catch(SQLException e) {
			throw new DAOException(e);
		}
		finally {
			DAOUtils.release(result, preparedStatement, conn);
		}
		return pallier;
	}

	@Override
	public Pallier getPallierByName(String name) throws DAOException {
		Connection conn = null;
		PreparedStatement preparedStatement = null;
		ResultSet result = null;
		Pallier pallier = null;
		try {
			conn = daoFactory.getConnection();
			preparedStatement = DAOUtils.initPreparedQuery(conn, SQL_SELECT_BY_NAME, false, name);
			result = preparedStatement.executeQuery();
			if(result.next()) {
				pallier = map(result);
			}
		}
		catch(SQLException e) {
			throw new DAOException(e);
		}
		finally {
			DAOUtils.release(result, preparedStatement, conn);
		}
		return pallier;
	}

	@Override
	public List<Pallier> getPallierList() throws DAOException {
		Connection conn = null;
		PreparedStatement preparedStatement = null;
		ResultSet result = null;
		List<Pallier> pallierList = new ArrayList<Pallier>();
		try {
			conn = daoFactory.getConnection();
			preparedStatement = DAOUtils.initPreparedQuery(conn, SQL_SELECT_ALL, false);
			result = preparedStatement.executeQuery();
			while(result.next()) {
				pallierList.add(map(result));
			}
		}
		catch(SQLException e) {
			throw new DAOException(e);
		}
		finally {
			DAOUtils.release(result, preparedStatement, conn);
		}
		return pallierList;
	}
	
	public int selectMaxPallierPosition() throws DAOException {
		Connection conn = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			conn = daoFactory.getConnection();
			preparedStatement = DAOUtils.initPreparedQuery(conn, SQL_SELECT_MAX_POSITION, false);
			resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				result = resultSet.getInt("maxPosition");
			}
		}
		catch(SQLException e) {
			throw new DAOException(e);
		}
		finally {
			DAOUtils.release(resultSet, preparedStatement, conn);
		}
		return result;
	}

	private static Pallier map(ResultSet resultSet) throws SQLException {
		Pallier pallier = new Pallier();
		pallier.setId(resultSet.getLong("id"));
		pallier.setPallierName(resultSet.getString("pallierName"));
		pallier.setImagePath(resultSet.getString("imagePath"));
		pallier.setPosition(resultSet.getInt("position"));
		pallier.setDescription(resultSet.getString("description"));
		return pallier;
	}

}
